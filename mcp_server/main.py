# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T10:03:04+00:00



import argparse
import json
import os
from datetime import datetime
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyHeader, APIKeyQuery, BaseSecurity
from fastapi import Query, UploadFile
from pydantic import constr

from models import (
    APIError,
    BanRequest,
    ChannelGetOrCreateRequest,
    ChannelsResponse,
    ChannelStateResponse,
    ChannelStopWatchingRequest,
    CheckPushRequest,
    CheckPushResponse,
    CheckSQSRequest,
    CheckSQSResponse,
    ConnectRequest,
    CreateBlockListRequest,
    CreateCallRequest,
    CreateCallResponse,
    CreateCampaignRequest,
    CreateCampaignResponse,
    CreateChannelTypeRequest,
    CreateChannelTypeResponse,
    CreateCommandRequest,
    CreateCommandResponse,
    CreateDeviceRequest,
    CreateImportRequest,
    CreateImportResponse,
    CreateImportURLRequest,
    CreateImportURLResponse,
    CreateRoleRequest,
    CreateRoleResponse,
    CreateSegmentRequest,
    CreateSegmentResponse,
    DeactivateUserRequest,
    DeactivateUserResponse,
    DeactivateUsersRequest,
    DeactivateUsersResponse,
    DeleteCampaignResponse,
    DeleteChannelResponse,
    DeleteChannelsRequest,
    DeleteChannelsResponse,
    DeleteCommandResponse,
    DeleteSegmentResponse,
    DeleteUserResponse,
    DeleteUsersRequest,
    DeleteUsersResponse,
    EventResponse,
    ExportChannelsRequest,
    ExportChannelsResponse,
    ExportUserResponse,
    ExportUsersRequest,
    ExportUsersResponse,
    FileDeleteResponse,
    FileUploadResponse,
    FlagRequest,
    FlagResponse,
    GetApplicationResponse,
    GetBlockListResponse,
    GetCallTokenRequest,
    GetCallTokenResponse,
    GetCommandResponse,
    GetCustomPermissionResponse,
    GetExportChannelsStatusResponse,
    GetImportResponse,
    GetManyMessagesResponse,
    GetOGResponse,
    GetRateLimitsResponse,
    GetReactionsResponse,
    GetRepliesResponse,
    GetTaskResponse,
    GuestRequest,
    GuestResponse,
    HideChannelRequest,
    HideChannelResponse,
    Ids,
    ImageUploadResponse,
    ListBlockListResponse,
    ListChannelTypesResponse,
    ListCommandsResponse,
    ListDevicesResponse,
    ListImportsResponse,
    ListPermissionsResponse,
    ListPushProvidersResponse,
    ListRolesResponse,
    MarkChannelsReadRequest,
    MarkReadRequest,
    MarkReadResponse,
    MarkUnreadRequest,
    MembersResponse,
    MessageActionRequest,
    MessageResponse,
    MessageWithPendingMetadataResponse,
    MuteChannelRequest,
    MuteChannelResponse,
    MuteUserRequest,
    MuteUserResponse,
    QueryBannedUsersRequest,
    QueryBannedUsersResponse,
    QueryCampaignsRequest,
    QueryCampaignsResponse,
    QueryChannelsRequest,
    QueryMembersRequest,
    QueryMessageFlagsRequest,
    QueryMessageFlagsResponse,
    QueryRecipientsRequest,
    QueryRecipientsResponse,
    QuerySegmentsRequest,
    QuerySegmentsResponse,
    QueryUsersRequest,
    ReactionRemovalResponse,
    ReactionResponse,
    ReactivateUserRequest,
    ReactivateUserResponse,
    ReactivateUsersRequest,
    ReactivateUsersResponse,
    Response,
    RestoreUsersRequest,
    ResumeCampaignResponse,
    ScheduleCampaignRequest,
    ScheduleCampaignResponse,
    SearchRequest,
    SearchResponse,
    SendEventRequest,
    SendMessageRequest,
    SendReactionRequest,
    SendUserCustomEventRequest,
    ShowChannelRequest,
    ShowChannelResponse,
    StopCampaignResponse,
    StopWatchingResponse,
    SyncRequest,
    SyncResponse,
    TestCampaignRequest,
    TestCampaignResponse,
    TranslateMessageRequest,
    TruncateChannelRequest,
    TruncateChannelResponse,
    Type6,
    UnmuteChannelRequest,
    UnmuteResponse,
    UnmuteUserRequest,
    UpdateAppRequest,
    UpdateBlockListRequest,
    UpdateCampaignRequest,
    UpdateCampaignResponse,
    UpdateChannelPartialRequest,
    UpdateChannelPartialResponse,
    UpdateChannelRequest,
    UpdateChannelResponse,
    UpdateChannelTypeRequest,
    UpdateChannelTypeResponse,
    UpdateCommandRequest,
    UpdateCommandResponse,
    UpdateMessagePartialRequest,
    UpdateMessageRequest,
    UpdateSegmentRequest,
    UpdateSegmentResponse,
    UpdateUserPartialRequest,
    UpdateUsersRequest,
    UpdateUsersResponse,
    UpsertPushProviderRequest,
    UpsertPushProviderResponse,
    UsersResponse,
)

app = MCPProxy(
    title='Stream Chat API',
    version='v79.19.1',
    servers=[
        {'description': 'Production', 'url': 'https://chat.stream-io-api.com'},
        {
            'description': 'Local',
            'url': 'http://localhost:{port}',
            'variables': {'port': {'default': '3030', 'description': 'Server port'}},
        },
    ],
)


@app.get(
    '/app',
    description=""" This method returns the application settings """,
    tags=['app_settings_management'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def get_app():
    """
    Get App Settings
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/app',
    description=""" This method updates one or more application settings """,
    tags=['app_settings_management'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def update_app(body: UpdateAppRequest):
    """
    Update App Settings
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/blocklists',
    description=""" Returns all available block lists """,
    tags=['block_list_management'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def list_block_lists():
    """
    List block lists
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/blocklists',
    description=""" Creates a new application blocklist, once created the blocklist can be used by any channel type """,
    tags=['block_list_management'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def create_block_list(body: CreateBlockListRequest):
    """
    Create block list
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/blocklists/{name}',
    description=""" Deletes previously created application blocklist """,
    tags=['block_list_management'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def delete_block_list(name: str):
    """
    Delete block list
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/blocklists/{name}',
    description=""" Returns block list by given name """,
    tags=['block_list_management'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def get_block_list(name: str):
    """
    Get block list
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/blocklists/{name}',
    description=""" Updates contents of the block list """,
    tags=['block_list_management'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def update_block_list(name: str, body: UpdateBlockListRequest = ...):
    """
    Update block list
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/calls/',
    description=""" Retrieves the token to join a call """,
    tags=['call_creation_management'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def get_call_token__1(body: GetCallTokenRequest):
    """
    Get Call Token ()
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/calls/{call_id}',
    description=""" Retrieves the token to join a call """,
    tags=['call_creation_management'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def get_call_token_call_id_0(call_id: str, body: GetCallTokenRequest = ...):
    """
    Get Call Token (call_id)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/campaigns',
    description=""" Query campaigns """,
    tags=['campaign_lifecycle_management'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def query_campaigns(payload: Optional[QueryCampaignsRequest] = None):
    """
    Query campaigns
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/campaigns',
    description=""" Creates a new campaign """,
    tags=['campaign_lifecycle_management'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def create_campaign(body: CreateCampaignRequest):
    """
    Create campaign
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/campaigns/{id}',
    description=""" Delete a campaign """,
    tags=['campaign_lifecycle_management'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def delete_campaign(id: str, recipients: Optional[bool] = None):
    """
    Delete campaign
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/campaigns/{id}',
    description=""" Update an existing campaign """,
    tags=['campaign_lifecycle_management'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def update_campaign(id: str, body: UpdateCampaignRequest = ...):
    """
    Update campaign
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/campaigns/{id}/resume',
    description=""" Resume a stopped campaign """,
    tags=['campaign_lifecycle_management'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def resume_campaign(id: str):
    """
    Resume campaign
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/campaigns/{id}/schedule',
    description=""" Schedule a campaign """,
    tags=['campaign_lifecycle_management'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def schedule_campaign(id: str, body: ScheduleCampaignRequest = ...):
    """
    Schedule campaign
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/campaigns/{id}/stop',
    description=""" Stop a running campaign """,
    tags=['campaign_lifecycle_management'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def stop_campaign(id: str):
    """
    Stop campaign
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/campaigns/{id}/test',
    description=""" Test a campaign """,
    tags=['campaign_lifecycle_management'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def test_campaign(id: str, body: TestCampaignRequest = ...):
    """
    Test campaign
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/channels',
    description=""" Query channels with filter query """,
    tags=['channel_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def query_channels(
    client_id: Optional[str] = None,
    connection_id: Optional[str] = None,
    body: QueryChannelsRequest = ...,
):
    """
    Query channels
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/channels/delete',
    description=""" Allows to delete several channels at once asynchronously """,
    tags=['channel_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def delete_channels(body: DeleteChannelsRequest):
    """
    Deletes channels asynchronously
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/channels/read',
    description=""" Marks channels as read up to the specific message. If no channels is given, mark all channel as read """,
    tags=['channel_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def mark_channels_read(body: MarkChannelsReadRequest):
    """
    Mark channels as read
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/channels/{type}/query',
    description=""" This method creates a channel or returns an existing one with matching attributes """,
    tags=['channel_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def get_or_create_channel_type_1(
    type: constr(max_length=64),
    client_id: Optional[str] = None,
    connection_id: Optional[str] = None,
    body: ChannelGetOrCreateRequest = ...,
):
    """
    Get or create channel (type)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/channels/{type}/{id}',
    description=""" Deletes channel """,
    tags=['channel_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def delete_channel(type: str, id: str = ..., hard_delete: Optional[bool] = None):
    """
    Delete channel
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/channels/{type}/{id}',
    description=""" Updates certain fields of the channel """,
    tags=['channel_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def update_channel_partial(
    type: str, id: str = ..., body: UpdateChannelPartialRequest = ...
):
    """
    Partially update channel
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/channels/{type}/{id}',
    description=""" Change channel data """,
    tags=['channel_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def update_channel(type: str, id: str = ..., body: UpdateChannelRequest = ...):
    """
    Update channel
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/channels/{type}/{id}/call',
    description=""" Creates a call """,
    tags=['call_creation_management'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def create_call(type: str, id: str = ..., body: CreateCallRequest = ...):
    """
    Create a call
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/channels/{type}/{id}/event',
    description=""" Sends event to the channel """,
    tags=['message_operation_management'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def send_event(type: str, id: str = ..., body: SendEventRequest = ...):
    """
    Send event
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/channels/{type}/{id}/file',
    description=""" Deletes previously uploaded file """,
    tags=['file_and_image_management'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def delete_file(url: Optional[str] = None, type: str = ..., id: str = ...):
    """
    Delete file
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/channels/{type}/{id}/file',
    description=""" Uploads file """,
    tags=['file_and_image_management'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def upload_file(type: str, id: str = ..., file: UploadFile = ...):
    """
    Upload file
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/channels/{type}/{id}/hide',
    description=""" Marks channel as hidden for current user """,
    tags=['channel_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def hide_channel(type: str, id: str = ..., body: HideChannelRequest = ...):
    """
    Hide channel
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/channels/{type}/{id}/image',
    description=""" Deletes previously uploaded image """,
    tags=['file_and_image_management'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def delete_image(url: Optional[str] = None, type: str = ..., id: str = ...):
    """
    Delete image
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/channels/{type}/{id}/image',
    description=""" Uploads image """,
    tags=['file_and_image_management', 'image_upload_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def upload_image(type: str, id: str = ..., file: UploadFile = ...):
    """
    Upload image
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/channels/{type}/{id}/message',
    description=""" Sends new message to the specified channel """,
    tags=['message_operation_management'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def send_message(type: str, id: str = ..., body: SendMessageRequest = ...):
    """
    Send new message
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/channels/{type}/{id}/messages',
    description=""" Returns list messages found by IDs """,
    tags=['message_operation_management', 'message_query_management'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def get_many_messages(type: str, id: str = ..., ids: Optional[Ids] = None):
    """
    Get many messages
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/channels/{type}/{id}/query',
    description=""" This method creates a channel or returns an existing one with matching attributes """,
    tags=['channel_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def get_or_create_channel_type_id_0(
    type: constr(max_length=64),
    id: constr(max_length=64) = ...,
    client_id: Optional[str] = None,
    connection_id: Optional[str] = None,
    body: ChannelGetOrCreateRequest = ...,
):
    """
    Get or create channel (type, id)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/channels/{type}/{id}/read',
    description=""" Marks channel as read up to the specific message """,
    tags=['message_operation_management'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def mark_read(type: str, id: str = ..., body: MarkReadRequest = ...):
    """
    Mark read
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/channels/{type}/{id}/show',
    description=""" Shows previously hidden channel """,
    tags=['channel_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def show_channel(type: str, id: str = ..., body: ShowChannelRequest = ...):
    """
    Show channel
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/channels/{type}/{id}/stop-watching',
    description=""" Call this method to stop receiving channel events """,
    tags=['channel_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def stop_watching_channel(
    type: str,
    id: str = ...,
    client_id: Optional[str] = None,
    connection_id: Optional[str] = None,
    body: ChannelStopWatchingRequest = ...,
):
    """
    Stop watching channel
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/channels/{type}/{id}/truncate',
    description=""" Truncates channel """,
    tags=['channel_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def truncate_channel(type: str, id: str = ..., body: TruncateChannelRequest = ...):
    """
    Truncate channel
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/channels/{type}/{id}/unread',
    description=""" Marks channel as unread from a specific message """,
    tags=['message_operation_management', 'message_flag_management'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def mark_unread(type: str, id: str = ..., body: MarkUnreadRequest = ...):
    """
    Mark unread
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/channeltypes',
    description=""" Lists all available channel types """,
    tags=['channel_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def list_channel_types():
    """
    List channel types
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/channeltypes',
    description=""" Creates new channel type """,
    tags=['channel_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def create_channel_type(body: CreateChannelTypeRequest):
    """
    Create channel type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/channeltypes/{name}',
    description=""" Deletes channel type """,
    tags=['channel_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def delete_channel_type(name: str):
    """
    Delete channel type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/channeltypes/{name}',
    description=""" Gets channel type """,
    tags=['channel_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def get_channel_type(name: str):
    """
    Get channel type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/channeltypes/{name}',
    description=""" Updates channel type """,
    tags=['channel_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def update_channel_type(name: str, body: UpdateChannelTypeRequest = ...):
    """
    Update channel type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/check_push',
    description=""" Sends a test message via push, this is a test endpoint to verify your push settings """,
    tags=['push_notification_services', 'push_provider_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def check_push(body: CheckPushRequest):
    """
    Check push
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/check_sqs',
    description=""" Validates Amazon SQS credentials """,
    tags=['push_notification_services'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def check_s_q_s(body: CheckSQSRequest):
    """
    Check SQS
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/commands',
    description=""" Returns all custom commands """,
    tags=['command_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def list_commands():
    """
    List commands
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/commands',
    description=""" Creates custom chat command """,
    tags=['command_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def create_command(body: CreateCommandRequest):
    """
    Create command
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/commands/{name}',
    description=""" Deletes custom chat command """,
    tags=['command_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def delete_command(name: str):
    """
    Delete command
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/commands/{name}',
    description=""" Returns custom command by its name """,
    tags=['command_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def get_command(name: str):
    """
    Get command
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/commands/{name}',
    description=""" Updates custom chat command """,
    tags=['command_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def update_command(name: str, body: UpdateCommandRequest = ...):
    """
    Update command
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/connect',
    description=""" Establishes WebSocket connection for user """,
    tags=['long_polling_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def connect(json_: Optional[ConnectRequest] = Query(None, alias='json')):
    """
    Connect (WebSocket)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/devices',
    description=""" Deletes device """,
    tags=['device_registration_management'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def delete_device(id: Optional[str] = None, user_id: Optional[str] = None):
    """
    Delete device
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/devices',
    description=""" Returns all available devices """,
    tags=['device_registration_management'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def list_devices(user_id: Optional[str] = None):
    """
    List devices
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/devices',
    description=""" Adds a new device to a user, if the same device already exists the call will have no effect """,
    tags=['device_registration_management'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def create_device(body: CreateDeviceRequest):
    """
    Create device
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/export/users',
    description=""" Exports user profile, reactions and messages for list of given users """,
    tags=['user_and_channel_export'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def export_user(body: ExportUsersRequest):
    """
    Export users
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/export_channels',
    description=""" Exports channel data to JSON file """,
    tags=['user_and_channel_export', 'channel_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def export_channels(body: ExportChannelsRequest):
    """
    Export channels
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/export_channels/{id}',
    tags=['user_and_channel_export', 'channel_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def get_export_channels_status(id: str):
    """
    Export channels status
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/guest',
    description=""" Creates guest user """,
    tags=['guest_user_management', 'user_operations_management'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def create_guest(body: GuestRequest):
    """
    Create guest
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/import_urls',
    description=""" Creates a new import URL """,
    tags=['import_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def create_import_u_r_l(body: CreateImportURLRequest):
    """
    Create import URL
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/imports',
    description=""" Gets an import """,
    tags=['import_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def list_imports():
    """
    Get import
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/imports',
    description=""" Creates a new import """,
    tags=['import_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def create_import(body: CreateImportRequest):
    """
    Create import
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/imports/{id}',
    description=""" Gets an import """,
    tags=['import_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def get_import(id: str):
    """
    Get import
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/longpoll',
    description=""" WebSocket fallback transport endpoint """,
    tags=['long_polling_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def long_poll(
    json_: Optional[ConnectRequest] = Query(None, alias='json'),
    connection_id: Optional[constr(max_length=36)] = None,
):
    """
    Long Poll (Transport)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/members',
    description=""" Find and filter channel members """,
    tags=['user_operations_management', 'user_information_querying'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def query_members(payload: Optional[QueryMembersRequest] = None):
    """
    Query members
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/messages/{id}',
    description=""" Deletes message """,
    tags=['message_operation_management'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def delete_message(id: str, hard: Optional[bool] = None):
    """
    Delete message
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/messages/{id}',
    description=""" Returns message by ID """,
    tags=['message_operation_management', 'message_query_management'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def get_message(id: str):
    """
    Get message
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/messages/{id}',
    description=""" Updates message with new data """,
    tags=['message_operation_management'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def update_message(id: str, body: UpdateMessageRequest = ...):
    """
    Update message
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/messages/{id}',
    description=""" Updates certain fields of the message """,
    tags=['message_operation_management'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def update_message_partial(id: str, body: UpdateMessagePartialRequest = ...):
    """
    Partially message update
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/messages/{id}/action',
    description=""" Executes message command action with given parameters """,
    tags=['message_operation_management', 'command_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def run_message_action(id: str, body: MessageActionRequest = ...):
    """
    Run message command action
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/messages/{id}/commit',
    description=""" Commits a pending message, which will make it visible in the channel """,
    tags=['message_operation_management'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def commit_message(id: str):
    """
    Commit message
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/messages/{id}/reaction',
    description=""" Sends reaction to specified message """,
    tags=['reaction_handling', 'message_operation_management'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def send_reaction(id: str, body: SendReactionRequest = ...):
    """
    Send reaction
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/messages/{id}/reaction/{type}',
    description=""" Removes user reaction from the message """,
    tags=['reaction_handling', 'message_operation_management'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def delete_reaction(id: str, type: str = ..., user_id: Optional[str] = None):
    """
    Delete reaction
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/messages/{id}/reactions',
    description=""" Returns list of reactions of specific message """,
    tags=['reaction_handling', 'message_operation_management'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def get_reactions(
    id: str, limit: Optional[float] = None, offset: Optional[float] = None
):
    """
    Get reactions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/messages/{id}/translate',
    description=""" Translates message to a given language using automated translation software """,
    tags=['message_operation_management'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def translate_message(id: str, body: TranslateMessageRequest = ...):
    """
    Translate message
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/messages/{parent_id}/replies',
    description=""" Returns replies (thread) of the message """,
    tags=['message_query_management'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def get_replies(
    parent_id: str,
    id_gte: Optional[str] = None,
    id_gt: Optional[str] = None,
    id_lte: Optional[str] = None,
    id_lt: Optional[str] = None,
    created_at_after_or_equal: Optional[datetime] = None,
    created_at_after: Optional[datetime] = None,
    created_at_before_or_equal: Optional[datetime] = None,
    created_at_before: Optional[datetime] = None,
    id_around: Optional[str] = None,
    created_at_around: Optional[datetime] = None,
):
    """
    Get replies
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/moderation/ban',
    description=""" Removes previously applied ban """,
    tags=['user_banning_operations', 'user_operations_management'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def unban(
    target_user_id: Optional[str] = None,
    type: Optional[str] = None,
    id: Optional[str] = None,
):
    """
    Unban user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/moderation/ban',
    description=""" Restricts user activity either in specific channel or globally """,
    tags=['user_banning_operations', 'user_operations_management'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def ban(body: BanRequest):
    """
    Ban user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/moderation/flag',
    description=""" Reports message or user for review by moderators """,
    tags=['message_flag_management'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def flag(body: FlagRequest):
    """
    Flag
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/moderation/flags/message',
    description=""" Find and filter message flags """,
    tags=['message_flag_management', 'message_operation_management'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def query_message_flags(payload: Optional[QueryMessageFlagsRequest] = None):
    """
    Query Message Flags
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/moderation/mute',
    description=""" Mutes one or several users """,
    tags=['user_muting_operations', 'user_operations_management'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def mute_user(body: MuteUserRequest):
    """
    Mute user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/moderation/mute/channel',
    description=""" Mutes channel for user """,
    tags=['user_muting_operations', 'channel_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def mute_channel(body: MuteChannelRequest):
    """
    Mute channel
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/moderation/unflag',
    description=""" Removes previously created user or message flag """,
    tags=['message_flag_management'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def unflag(body: FlagRequest):
    """
    Unflag
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/moderation/unmute',
    description=""" Unmutes previously muted user """,
    tags=['user_muting_operations', 'user_operations_management'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def unmute_user(body: UnmuteUserRequest):
    """
    Unmute user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/moderation/unmute/channel',
    description=""" Unmutes channel for user """,
    tags=['user_muting_operations', 'channel_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def unmute_channel(body: UnmuteChannelRequest):
    """
    Unmute channel
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/og',
    description=""" Get an OpenGraph attachment for a link """,
    tags=['user_information_querying'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def get_o_g(url: Optional[str] = None):
    """
    Get OG
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/permissions',
    description=""" Lists all available permissions """,
    tags=['permission_handling'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def list_permissions():
    """
    List permissions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/permissions/{id}',
    description=""" Gets custom permission """,
    tags=['permission_handling'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def get_permission(id: str):
    """
    Get permission
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/push_providers',
    description=""" List details of all push providers. """,
    tags=['push_provider_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def list_push_providers():
    """
    List push providers
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/push_providers',
    description=""" Upsert a push provider for v2 with multi bundle/package support """,
    tags=['push_provider_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def upsert_push_provider(body: UpsertPushProviderRequest):
    """
    Upsert a push provider
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/push_providers/{type}/{name}',
    description=""" Delete a push provider from v2 with multi bundle/package support. v1 isn't supported in this endpoint """,
    tags=['push_provider_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def delete_push_provider(type: Type6, name: constr(min_length=1, max_length=36) = ...):
    """
    Delete a push provider
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/query_banned_users',
    description=""" Find and filter channel scoped or global user bans """,
    tags=['block_list_management', 'user_banning_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def query_banned_users(payload: Optional[QueryBannedUsersRequest] = None):
    """
    Query Banned Users
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rate_limits',
    description=""" Get rate limits usage and quotas """,
    tags=['rate_limit_handling'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def get_rate_limits(
    server_side: Optional[bool] = None,
    android: Optional[bool] = None,
    ios: Optional[bool] = None,
    web: Optional[bool] = None,
    endpoints: Optional[str] = None,
):
    """
    Get rate limits
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/recipients',
    description=""" Query recipients """,
    tags=['user_information_querying', 'message_query_management'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def query_recipients(payload: Optional[QueryRecipientsRequest] = None):
    """
    Query recipients
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/roles',
    description=""" Lists all available roles """,
    tags=['role_based_management'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def list_roles():
    """
    List roles
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/roles',
    description=""" Creates custom role """,
    tags=['role_based_management'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def create_role(body: CreateRoleRequest):
    """
    Create role
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/roles/{name}',
    description=""" Deletes custom role """,
    tags=['role_based_management'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def delete_role(name: str):
    """
    Delete role
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/search',
    description=""" Search messages across channels """,
    tags=['message_query_management', 'message_operation_management'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def search(payload: Optional[SearchRequest] = None):
    """
    Search messages
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/segments',
    description=""" Query segments """,
    tags=['segment_operations', 'message_query_management'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def query_segments(payload: Optional[QuerySegmentsRequest] = None):
    """
    Query segments
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/segments',
    description=""" Create a segment """,
    tags=['segment_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def create_segment(body: CreateSegmentRequest):
    """
    Create segment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/segments/{id}',
    description=""" Delete a segment """,
    tags=['segment_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def delete_segment(id: str):
    """
    Delete segment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/segments/{id}',
    description=""" Update an existing segment """,
    tags=['segment_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def update_segment(id: str, body: UpdateSegmentRequest = ...):
    """
    Update segment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/sync',
    description=""" Returns all events happened since client disconnect in specified channels """,
    tags=['task_query_management', 'user_operations_management'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def sync(
    with_inaccessible_cids: Optional[bool] = None,
    watch: Optional[bool] = None,
    client_id: Optional[str] = None,
    connection_id: Optional[str] = None,
    body: SyncRequest = ...,
):
    """
    Sync
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/tasks/{id}',
    description=""" Gets status of a task """,
    tags=['task_query_management'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def get_task(id: str):
    """
    Get status of a task
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/users',
    description=""" Find and filter users """,
    tags=['user_information_querying', 'user_operations_management'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def query_users(payload: Optional[QueryUsersRequest] = None):
    """
    Query users
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/users',
    description=""" Updates certain fields of the user """,
    tags=['user_operations_management'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def update_users_partial(body: UpdateUserPartialRequest):
    """
    Partially update user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/users',
    description=""" Update or create users in bulk """,
    tags=['user_operations_management'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def update_users(body: UpdateUsersRequest):
    """
    Upsert users
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/users/deactivate',
    description=""" Deactivate users in batches """,
    tags=['user_operations_management', 'user_banning_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def deactivate_users(body: DeactivateUsersRequest):
    """
    Deactivate users
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/users/delete',
    description=""" Deletes users and optionally all their belongings asynchronously. """,
    tags=['user_operations_management', 'user_banning_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def delete_users(body: DeleteUsersRequest):
    """
    Delete Users
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/users/reactivate',
    description=""" Reactivate users in batches """,
    tags=['user_operations_management'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def reactivate_users(body: ReactivateUsersRequest):
    """
    Reactivate users
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/users/restore',
    description=""" Restore soft deleted users """,
    tags=['user_operations_management'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def restore_users(body: RestoreUsersRequest):
    """
    Restore users
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/users/{user_id}',
    description=""" Deletes user and optionally all their belongings. The Endpoint is deprecated, please use 'Delete Users' endpoint instead """,
    tags=['user_operations_management', 'user_banning_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def delete_user(
    user_id: str,
    mark_messages_deleted: Optional[bool] = None,
    hard_delete: Optional[bool] = None,
    delete_conversation_channels: Optional[bool] = None,
):
    """
    Delete user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/users/{user_id}/deactivate',
    description=""" Deactivates user with possibility to activate it back """,
    tags=['user_operations_management', 'user_banning_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def deactivate_user(user_id: str, body: DeactivateUserRequest = ...):
    """
    Deactivate user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/users/{user_id}/event',
    description=""" Sends a custom event to a user """,
    tags=['user_operations_management', 'message_operation_management'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def send_user_custom_event(user_id: str, body: SendUserCustomEventRequest = ...):
    """
    Send user event
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/users/{user_id}/export',
    description=""" Exports the user's profile, reactions and messages. Raises an error if a user has more than 10k messages or reactions """,
    tags=['user_and_channel_export', 'user_operations_management'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def get_users__user_id_export(user_id: str):
    """
    Export user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/users/{user_id}/reactivate',
    description=""" Activates user who's been deactivated previously """,
    tags=['user_operations_management'],
    security=[
        APIKeyHeader(name="Authorization"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
        APIKeyQuery(name="api_key"),
        APIKeyHeader(name="Stream-Auth-Type"),
    ],
)
def reactivate_user(user_id: str, body: ReactivateUserRequest = ...):
    """
    Reactivate user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
